% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/eval.R
\name{rust_eval}
\alias{rust_eval}
\title{Evaluate Rust code}
\usage{
rust_eval(code, ...)
}
\arguments{
\item{code}{Input rust code.}

\item{...}{Other parameters handed off to \code{\link[=rust_function]{rust_function()}}.}
}
\value{
The return value generated by the Rust code.
}
\description{
Compile and evaluate one or more Rust expressions. If the last
expression in the Rust code returns a value (i.e., does not end with
\verb{;}), then this value is returned to R. In Rust, the return value is
of type \code{Robj}. Most native Rust types can be cast into this type
by calling \code{into()} on the value to be returned, see examples.
}
\examples{
\dontrun{
# Rust code without return value, called only for its side effects
rust_eval(
  code = 'rprintln!("hello from Rust!");'
)

# Rust code with return value; note the `.into()` at the end
rust_eval(
  code = '
    let x = 5;
    let y = 7;
    let z = x * y;
    z.into() // cast z into an Robj and return
 '
)
}
}
